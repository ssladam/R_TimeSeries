cust.xreg3 <- c('precip1_ms3', 'avgTemp2_ms3', 'ndvi_se', 'ndvi_sw','ndvi_ne','ndvi_nw', 'ndvi_ms3', 'case_lag1')
cust.xreg4 <- c('case_lag1', 'percip.lagw1', 'percip.lagw2', 'percip.lagw3', 'temp.lagw1',
'temp.lagw2', 'temp.lagw3', 'humid.lagw1', 'humid.lagw2', 'humid.lagw3')
#,'ndvi.lagw1', 'ndvi.lagw2', 'ndvi.lagw3')
cust.xreg.lag1 <- c('case_lag1', 'percip.lagw1', 'temp.lagw1', 'humid.lagw1', 'ndvi.lagw1')
cust.xreg.lag2 <- c('case_lag1', 'percip.lagw2', 'temp.lagw2', 'humid.lagw2', 'ndvi.lagw2')
cust.xreg.lag3 <- c('case_lag1', 'percip.lagw3', 'temp.lagw3', 'humid.lagw3', 'ndvi.lagw3')
#=====================================================================================
#             Create the model
#=====================================================================================
get_best_model <- function(input.data, input.xreg) {
best_mae <- 1000
true.mae = vector()
split <- floor(nrow(input.data)*.2)
X.train <- ts(input.data$total_cases[1:(nrow(input.data)-split)], frequency = 52)
X.test <- ts(input.data$total_cases[(nrow(input.data)-split):nrow(input.data)], frequency = 52, start=(end(X.train) + c(0,1)))
xreg.data = input.data %>% select(input.xreg)
xreg.train <- xreg.data[1:(nrow(input.data)-split),]
xreg.test <- xreg.data[(nrow(input.data)-split):nrow(input.data),]
grid = seq(1:10)
for (i in grid) {
X.fit <- nnetar(X.train, p=1, repeats = 10, maxit=256, scale.inputs = TRUE, xreg=xreg.train)
X.fc <- forecast(X.fit, h=split, xreg=xreg.test)
model.mae <- accuracy(X.fc)[3]
#for (j in seq((nrow(input.data)-split),(nrow(input.data)-1) )) {
for (j in 1:nrow(xreg.test) ) {
#print(j)
point.fc <- forecast(X.fit, h=1, xreg=xreg.test[j,])
point.fc <- as.numeric(point.fc$mean)
if(point.fc < 0) {point.fc <- 0}
point.mae <- abs(point.fc - X.test[j])
true.mae <- append(true.mae, point.mae)
#paste(j, ":", true.mae)
# test.X.iq$predicted[i] <- point.fc
# xreg.iq$case_lag1[i+1] <- point.fc
}
#print(mean(true.mae))
mae <- mean(true.mae)
if (mae < best_mae) {
best_fit <- X.fit
best_mae <- mae
}
cat('Iteration:', i, 'model.mae:', model.mae, ' true mae:', mae, '\n')
}
X.fit <- nnetar(X.train, xreg=xreg.train, model = best_fit)
X.fc <- forecast(X.fit, h=split, xreg=xreg.test)
plot(X.fc, type='l')
lines(X.test,col='red')
X.fit <- nnetar(ts(input.data$total_cases, frequency=52), xreg=xreg.data, model = best_fit)
return(X.fit)
}
test.xreg <- c(cust.xreg2, cust.xreg4)
xreg.sj = test.X.sj %>% select(test.xreg)
best_sj <- get_best_model(train.X.sj, test.xreg)
for (i in (1:(nrow(test.X.sj)))) {
point.fc <- forecast(best_sj, h=1, xreg=xreg.sj[i,])
point.fc <- as.numeric(point.fc$mean)
if(point.fc < 0) {point.fc <- 0}
test.X.sj$predicted[i] <- point.fc
if (i<(nrow(test.X.sj)-1)) {
xreg.sj$case_lag1[i+1] <- point.fc
if (i<(nrow(test.X.sj)-2)) {
xreg.sj$case_lag2[i+2] <- point.fc
if (i<(nrow(test.X.sj)-1)) {
xreg.sj$case_lag3[i+3] <- point.fc
}
}
}
}
train.X.sj$case_lag1
train.X.sj$case_lag2
train.X.sj$case_lag3
test.X.sj$case_lag2
test.X.sj$case_lag3
train.X.sj$total_cases
test.X.sj$predicted <- 0
test.X.sj$case_lag1 <- 0
test.X.sj$case_lag2 <- 0
test.X.sj$case_lag3 <- 0
test.X.sj$case_lag1[1] <- train.X.sj$total_cases[nrow(train.X.sj)]
test.X.sj$case_lag2[1] <- train.X.sj$total_cases[(nrow(train.X.sj)-1)]
test.X.sj$case_lag2[2] <- train.X.sj$total_cases[(nrow(train.X.sj))]
test.X.sj$case_lag3[1] <- train.X.sj$total_cases[(nrow(train.X.sj)-2)]
test.X.sj$case_lag3[2] <- train.X.sj$total_cases[(nrow(train.X.sj)-1)]
test.X.sj$case_lag3[3] <- train.X.sj$total_cases[(nrow(train.X.sj))
test.X.sj$case_lag3
test.X.sj$case_lag2[2] <- train.X.sj$total_cases[(nrow(train.X.sj))]
test.X.sj$case_lag3[3] <- train.X.sj$total_cases[(nrow(train.X.sj))]
test.X.sj$case_lag3
test.X.sj$case_lag2
test.X.sj$case_lag1
test.X.iq$predicted <- 0
test.X.iq$case_lag1 <- 0
test.X.iq$case_lag2 <- 0
test.X.iq$case_lag3 <- 0
test.X.iq$case_lag1[1] <- test.X.iq$total_cases[nrow(train.X.sj)]
test.X.iq$case_lag2[1] <- test.X.iq$total_cases[(nrow(train.X.sj)-1)]
test.X.iq$case_lag2[2] <- test.X.iq$total_cases[(nrow(train.X.sj))]
test.X.iq$case_lag3[1] <- test.X.iq$total_cases[(nrow(train.X.sj)-2)]
test.X.iq$case_lag3[2] <- test.X.iq$total_cases[(nrow(train.X.sj)-1)]
test.X.iq$case_lag3[3] <- test.X.iq$total_cases[(nrow(train.X.sj))]
test.X.iq$predicted <- 0
test.X.iq$case_lag1 <- 0
test.X.iq$case_lag2 <- 0
test.X.iq$case_lag3 <- 0
test.X.iq$case_lag1[1] <- test.X.iq$total_cases[nrow(test.X.iq)]
test.X.iq$case_lag2[1] <- test.X.iq$total_cases[(nrow(test.X.iq)-1)]
test.X.iq$case_lag2[2] <- test.X.iq$total_cases[(nrow(test.X.iq))]
test.X.iq$case_lag3[1] <- test.X.iq$total_cases[(nrow(test.X.iq)-2)]
test.X.iq$case_lag3[2] <- test.X.iq$total_cases[(nrow(test.X.iq)-1)]
test.X.iq$case_lag3[3] <- test.X.iq$total_cases[(nrow(test.X.iq))]
test.X.iq$predicted <- 0
test.X.iq$case_lag1 <- 0
test.X.iq$case_lag2 <- 0
test.X.iq$case_lag3 <- 0
test.X.iq$case_lag1[1] <- train.X.iq$total_cases[nrow(train.X.iq)]
test.X.iq$case_lag2[1] <- train.X.iq$total_cases[(nrow(train.X.iq)-1)]
test.X.iq$case_lag2[2] <- train.X.iq$total_cases[(nrow(train.X.iq))]
test.X.iq$case_lag3[1] <- train.X.iq$total_cases[(nrow(train.X.iq)-2)]
test.X.iq$case_lag3[2] <- train.X.iq$total_cases[(nrow(train.X.iq)-1)]
test.X.iq$case_lag3[3] <- train.X.iq$total_cases[(nrow(train.X.iq))]
train.X.sj <- train.X %>% filter(city=='sj')
train.y.sj <- train.y %>% filter(city=='sj')
train.X.iq <- train.X %>% filter(city=='iq')
train.y.iq <- train.y %>% filter(city=='iq')
test.X.sj <- test.X %>% filter(city=='sj')
test.X.iq <- test.X %>% filter(city=='iq')
train.X.sj %<>% mutate('total_cases' = train.y.sj$total_cases)
train.X.sj$case_lag1 <- lag(train.X.sj$total_cases, 1)
train.X.sj$case_lag2 <- lag(train.X.sj$total_cases, 2)
train.X.sj$case_lag3 <- lag(train.X.sj$total_cases, 3)
train.X.iq %<>% mutate('total_cases' = train.y.sj$total_cases)
train.X.iq$case_lag1 <- lag(train.X.iq$total_cases, 1)
train.X.iq$case_lag2 <- lag(train.X.iq$total_cases, 2)
train.X.iq$case_lag3 <- lag(train.X.iq$total_cases, 3)
test.X.sj$predicted <- 0
test.X.sj$case_lag1 <- 0
test.X.sj$case_lag2 <- 0
test.X.sj$case_lag3 <- 0
test.X.sj$case_lag1[1] <- train.X.sj$total_cases[nrow(train.X.sj)]
test.X.sj$case_lag2[1] <- train.X.sj$total_cases[(nrow(train.X.sj)-1)]
test.X.sj$case_lag2[2] <- train.X.sj$total_cases[(nrow(train.X.sj))]
test.X.sj$case_lag3[1] <- train.X.sj$total_cases[(nrow(train.X.sj)-2)]
test.X.sj$case_lag3[2] <- train.X.sj$total_cases[(nrow(train.X.sj)-1)]
test.X.sj$case_lag3[3] <- train.X.sj$total_cases[(nrow(train.X.sj))]
test.X.iq$predicted <- 0
test.X.iq$case_lag1 <- 0
test.X.iq$case_lag2 <- 0
test.X.iq$case_lag3 <- 0
test.X.iq$case_lag1[1] <- train.X.iq$total_cases[nrow(train.X.iq)]
test.X.iq$case_lag2[1] <- train.X.iq$total_cases[(nrow(train.X.iq)-1)]
test.X.iq$case_lag2[2] <- train.X.iq$total_cases[(nrow(train.X.iq))]
test.X.iq$case_lag3[1] <- train.X.iq$total_cases[(nrow(train.X.iq)-2)]
test.X.iq$case_lag3[2] <- train.X.iq$total_cases[(nrow(train.X.iq)-1)]
test.X.iq$case_lag3[3] <- train.X.iq$total_cases[(nrow(train.X.iq))]
train.X.sj <- train.X %>% filter(city=='sj')
train.y.sj <- train.y %>% filter(city=='sj')
train.X.iq <- train.X %>% filter(city=='iq')
train.y.iq <- train.y %>% filter(city=='iq')
test.X.sj <- test.X %>% filter(city=='sj')
test.X.iq <- test.X %>% filter(city=='iq')
train.X.sj %<>% mutate('total_cases' = train.y.sj$total_cases)
train.X.sj$case_lag1 <- lag(train.X.sj$total_cases, 1)
train.X.sj$case_lag2 <- lag(train.X.sj$total_cases, 2)
train.X.sj$case_lag3 <- lag(train.X.sj$total_cases, 3)
train.X.iq %<>% mutate('total_cases' = train.y.sj$total_cases)
train.X.iq$case_lag1 <- lag(train.X.iq$total_cases, 1)
train.X.iq$case_lag2 <- lag(train.X.iq$total_cases, 2)
train.X.iq$case_lag3 <- lag(train.X.iq$total_cases, 3)
test.X.sj$predicted <- 0
test.X.sj$case_lag1 <- 0
test.X.sj$case_lag2 <- 0
test.X.sj$case_lag3 <- 0
test.X.sj$case_lag1[1] <- train.X.sj$total_cases[nrow(train.X.sj)]
test.X.sj$case_lag2[1] <- train.X.sj$total_cases[(nrow(train.X.sj)-1)]
test.X.sj$case_lag2[2] <- train.X.sj$total_cases[(nrow(train.X.sj))]
test.X.sj$case_lag3[1] <- train.X.sj$total_cases[(nrow(train.X.sj)-2)]
test.X.sj$case_lag3[2] <- train.X.sj$total_cases[(nrow(train.X.sj)-1)]
test.X.sj$case_lag3[3] <- train.X.sj$total_cases[(nrow(train.X.sj))]
test.X.iq$predicted <- 0
test.X.iq$case_lag1 <- 0
test.X.iq$case_lag2 <- 0
test.X.iq$case_lag3 <- 0
test.X.iq$case_lag1[1] <- train.X.iq$total_cases[nrow(train.X.iq)]
train.X.sj <- train.X %>% filter(city=='sj')
train.y.sj <- train.y %>% filter(city=='sj')
train.X.iq <- train.X %>% filter(city=='iq')
train.y.iq <- train.y %>% filter(city=='iq')
test.X.sj <- test.X %>% filter(city=='sj')
test.X.iq <- test.X %>% filter(city=='iq')
train.X.sj %<>% mutate('total_cases' = train.y.sj$total_cases)
train.X.sj$case_lag1 <- lag(train.X.sj$total_cases, 1)
train.X.sj$case_lag2 <- lag(train.X.sj$total_cases, 2)
train.X.sj$case_lag3 <- lag(train.X.sj$total_cases, 3)
train.X.iq %<>% mutate('total_cases' = train.y.iq$total_cases)
train.X.iq$case_lag1 <- lag(train.X.iq$total_cases, 1)
train.X.iq$case_lag2 <- lag(train.X.iq$total_cases, 2)
train.X.iq$case_lag3 <- lag(train.X.iq$total_cases, 3)
test.X.sj$predicted <- 0
test.X.sj$case_lag1 <- 0
test.X.sj$case_lag2 <- 0
test.X.sj$case_lag3 <- 0
test.X.sj$case_lag1[1] <- train.X.sj$total_cases[nrow(train.X.sj)]
test.X.sj$case_lag2[1] <- train.X.sj$total_cases[(nrow(train.X.sj)-1)]
test.X.sj$case_lag2[2] <- train.X.sj$total_cases[(nrow(train.X.sj))]
test.X.sj$case_lag3[1] <- train.X.sj$total_cases[(nrow(train.X.sj)-2)]
test.X.sj$case_lag3[2] <- train.X.sj$total_cases[(nrow(train.X.sj)-1)]
test.X.sj$case_lag3[3] <- train.X.sj$total_cases[(nrow(train.X.sj))]
test.X.iq$predicted <- 0
test.X.iq$case_lag1 <- 0
test.X.iq$case_lag2 <- 0
test.X.iq$case_lag3 <- 0
test.X.iq$case_lag1[1] <- train.X.iq$total_cases[nrow(train.X.iq)]
test.X.iq$case_lag2[1] <- train.X.iq$total_cases[(nrow(train.X.iq)-1)]
test.X.iq$case_lag2[2] <- train.X.iq$total_cases[(nrow(train.X.iq))]
test.X.iq$case_lag3[1] <- train.X.iq$total_cases[(nrow(train.X.iq)-2)]
test.X.iq$case_lag3[2] <- train.X.iq$total_cases[(nrow(train.X.iq)-1)]
test.X.iq$case_lag3[3] <- train.X.iq$total_cases[(nrow(train.X.iq))]
train.X.sj.imp <- mice(data=train.X.sj, method = 'rf', ntree=3)
train.X.sj <- as.tibble(complete(train.X.sj.imp, 1))
train.X.sj %>% is_missing()
rm(train.X.sj.imp)
train.X.iq.imp <- mice(data=train.X.iq, method = 'rf', ntree=3)
train.X.iq <- as.tibble(complete(train.X.iq.imp, 1))
train.X.iq %>% is_missing()
rm(train.X.iq.imp)
cust.xreg <- c('station_max_temp_c', 'station_avg_temp_c', 'precip1_ms3',
'reanalysis_specific_humidity_g_per_kg', 'case_lag1',
'ndvi_se', 'ndvi_sw','ndvi_ne','ndvi_nw')
cust.xreg1 <- c('precip1_ms3', 'avgTemp1_ms3', 'maxTemp1_ms3', 'humid_ms3', 'ndvi_all', 'ndvi_ms3', 'case_lag1')
cust.xreg2 <- c('precip2_ms3', 'avgTemp2_ms3', 'maxTemp2_ms3', 'humid_ms3', 'ndvi_all', 'ndvi_ms3', 'case_lag1')
cust.xreg3 <- c('precip1_ms3', 'avgTemp2_ms3', 'ndvi_se', 'ndvi_sw','ndvi_ne','ndvi_nw', 'ndvi_ms3', 'case_lag1')
cust.xreg4 <- c('case_lag1', 'percip.lagw1', 'percip.lagw2', 'percip.lagw3', 'temp.lagw1',
'temp.lagw2', 'temp.lagw3', 'humid.lagw1', 'humid.lagw2', 'humid.lagw3')
#,'ndvi.lagw1', 'ndvi.lagw2', 'ndvi.lagw3')
cust.xreg.lag1 <- c('case_lag1', 'percip.lagw1', 'temp.lagw1', 'humid.lagw1', 'ndvi.lagw1')
cust.xreg.lag2 <- c('case_lag1', 'percip.lagw2', 'temp.lagw2', 'humid.lagw2', 'ndvi.lagw2')
cust.xreg.lag3 <- c('case_lag1', 'percip.lagw3', 'temp.lagw3', 'humid.lagw3', 'ndvi.lagw3')
get_best_model <- function(input.data, input.xreg) {
best_mae <- 1000
true.mae = vector()
split <- floor(nrow(input.data)*.2)
X.train <- ts(input.data$total_cases[1:(nrow(input.data)-split)], frequency = 52)
X.test <- ts(input.data$total_cases[(nrow(input.data)-split):nrow(input.data)], frequency = 52, start=(end(X.train) + c(0,1)))
xreg.data = input.data %>% select(input.xreg)
xreg.train <- xreg.data[1:(nrow(input.data)-split),]
xreg.test <- xreg.data[(nrow(input.data)-split):nrow(input.data),]
grid = seq(1:10)
for (i in grid) {
X.fit <- nnetar(X.train, p=1, repeats = 10, maxit=256, scale.inputs = TRUE, xreg=xreg.train)
X.fc <- forecast(X.fit, h=split, xreg=xreg.test)
model.mae <- accuracy(X.fc)[3]
#for (j in seq((nrow(input.data)-split),(nrow(input.data)-1) )) {
for (j in 1:nrow(xreg.test) ) {
#print(j)
point.fc <- forecast(X.fit, h=1, xreg=xreg.test[j,])
point.fc <- as.numeric(point.fc$mean)
if(point.fc < 0) {point.fc <- 0}
point.mae <- abs(point.fc - X.test[j])
true.mae <- append(true.mae, point.mae)
#paste(j, ":", true.mae)
# test.X.iq$predicted[i] <- point.fc
# xreg.iq$case_lag1[i+1] <- point.fc
}
#print(mean(true.mae))
mae <- mean(true.mae)
if (mae < best_mae) {
best_fit <- X.fit
best_mae <- mae
}
cat('Iteration:', i, 'model.mae:', model.mae, ' true mae:', mae, '\n')
}
X.fit <- nnetar(X.train, xreg=xreg.train, model = best_fit)
X.fc <- forecast(X.fit, h=split, xreg=xreg.test)
plot(X.fc, type='l')
lines(X.test,col='red')
X.fit <- nnetar(ts(input.data$total_cases, frequency=52), xreg=xreg.data, model = best_fit)
return(X.fit)
}
get_best_model <- function(input.data, input.xreg) {
best_mae <- 1000
true.mae = vector()
split <- floor(nrow(input.data)*.2)
X.train <- ts(input.data$total_cases[1:(nrow(input.data)-split)], frequency = 52)
X.test <- ts(input.data$total_cases[(nrow(input.data)-split):nrow(input.data)], frequency = 52, start=(end(X.train) + c(0,1)))
xreg.data = input.data %>% select(input.xreg)
xreg.train <- xreg.data[1:(nrow(input.data)-split),]
xreg.test <- xreg.data[(nrow(input.data)-split):nrow(input.data),]
grid = seq(1:3)
for (i in grid) {
X.fit <- nnetar(X.train, p=1, repeats = 10, maxit=256, scale.inputs = TRUE, xreg=xreg.train)
X.fc <- forecast(X.fit, h=split, xreg=xreg.test)
model.mae <- accuracy(X.fc)[3]
#for (j in seq((nrow(input.data)-split),(nrow(input.data)-1) )) {
for (j in 1:nrow(xreg.test) ) {
#print(j)
point.fc <- forecast(X.fit, h=1, xreg=xreg.test[j,])
point.fc <- as.numeric(point.fc$mean)
if(point.fc < 0) {point.fc <- 0}
point.mae <- abs(point.fc - X.test[j])
true.mae <- append(true.mae, point.mae)
#paste(j, ":", true.mae)
# test.X.iq$predicted[i] <- point.fc
# xreg.iq$case_lag1[i+1] <- point.fc
}
#print(mean(true.mae))
mae <- mean(true.mae)
if (mae < best_mae) {
best_fit <- X.fit
best_mae <- mae
}
cat('Iteration:', i, 'model.mae:', model.mae, ' true mae:', mae, '\n')
}
X.fit <- nnetar(X.train, xreg=xreg.train, model = best_fit)
X.fc <- forecast(X.fit, h=split, xreg=xreg.test)
plot(X.fc, type='l')
lines(X.test,col='red')
X.fit <- nnetar(ts(input.data$total_cases, frequency=52), xreg=xreg.data, model = best_fit)
return(X.fit)
}
test.xreg <- c(cust.xreg2, cust.xreg4) #11.3
xreg.sj = test.X.sj %>% select(test.xreg)
best_sj <- get_best_model(train.X.sj, test.xreg)
for (i in (1:(nrow(test.X.sj)))) {
point.fc <- forecast(best_sj, h=1, xreg=xreg.sj[i,])
point.fc <- as.numeric(point.fc$mean)
if(point.fc < 0) {point.fc <- 0}
test.X.sj$predicted[i] <- point.fc
if (i<(nrow(test.X.sj)-1)) {
xreg.sj$case_lag1[i+1] <- point.fc
if (i<(nrow(test.X.sj)-2)) {
xreg.sj$case_lag2[i+2] <- point.fc
if (i<(nrow(test.X.sj)-3)) {
xreg.sj$case_lag3[i+3] <- point.fc
}
}
}
}
i
xreg.sj[i,]
cust.xreg.caselag <- c('case_lag1', 'case_lag2','case_lag3','percip.lagw2', 'temp.lagw2', 'humid.lagw2', 'ndvi.lagw2')
test.xreg <- c(cust.xreg.caselag)
xreg.sj = test.X.sj %>% select(test.xreg)
best_sj <- get_best_model(train.X.sj, test.xreg)
for (i in (1:(nrow(test.X.sj)))) {
point.fc <- forecast(best_sj, h=1, xreg=xreg.sj[i,])
point.fc <- as.numeric(point.fc$mean)
if(point.fc < 0) {point.fc <- 0}
test.X.sj$predicted[i] <- point.fc
if (i<(nrow(test.X.sj)-1)) {
xreg.sj$case_lag1[i+1] <- point.fc
if (i<(nrow(test.X.sj)-2)) {
xreg.sj$case_lag2[i+2] <- point.fc
if (i<(nrow(test.X.sj)-3)) {
xreg.sj$case_lag3[i+3] <- point.fc
}
}
}
}
plot(test.X.sj$predicted, type='l', main='SJ predicted cases')
'case_lag2' in colnames(xreg.sj)
'case_lag2' %in% colnames(xreg.sj)
for (i in (1:(nrow(test.X.sj)))) {
point.fc <- forecast(best_sj, h=1, xreg=xreg.sj[i,])
point.fc <- as.numeric(point.fc$mean)
if(point.fc < 0) {point.fc <- 0}
test.X.sj$predicted[i] <- point.fc
if (i<(nrow(test.X.sj)-1)) {
xreg.sj$case_lag1[i+1] <- point.fc
if (i<(nrow(test.X.sj)-2) & 'case_lag2' %in% colnames(xreg.sj)) {
xreg.sj$case_lag2[i+2] <- point.fc
if (i<(nrow(test.X.sj)-3) & 'case_lag3' %in% colnames(xreg.sj)) {
xreg.sj$case_lag3[i+3] <- point.fc
}
}
}
}
plot(test.X.sj$predicted, type='l', main='SJ predicted cases')
test.xreg <- c(cust.xreg.caselag)
xreg.sj = test.X.sj %>% select(test.xreg)
best_sj <- get_best_model(train.X.sj, test.xreg)
for (i in (1:(nrow(test.X.sj)))) {
point.fc <- forecast(best_sj, h=1, xreg=xreg.sj[i,])
point.fc <- as.numeric(point.fc$mean)
if(point.fc < 0) {point.fc <- 0}
test.X.sj$predicted[i] <- point.fc
if (i<(nrow(test.X.sj)-1)) {
xreg.sj$case_lag1[i+1] <- point.fc
if (i<(nrow(test.X.sj)-2) & 'case_lag2' %in% colnames(xreg.sj)) {
xreg.sj$case_lag2[i+2] <- point.fc
if (i<(nrow(test.X.sj)-3) & 'case_lag3' %in% colnames(xreg.sj)) {
xreg.sj$case_lag3[i+3] <- point.fc
}
}
}
}
plot(test.X.sj$predicted, type='l', main='SJ predicted cases')
test.xreg <- c(cust.xreg.caselag, cust.xreg)
xreg.sj = test.X.sj %>% select(test.xreg)
best_sj <- get_best_model(train.X.sj, test.xreg)
for (i in (1:(nrow(test.X.sj)))) {
point.fc <- forecast(best_sj, h=1, xreg=xreg.sj[i,])
point.fc <- as.numeric(point.fc$mean)
if(point.fc < 0) {point.fc <- 0}
test.X.sj$predicted[i] <- point.fc
if (i<(nrow(test.X.sj)-1)) {
xreg.sj$case_lag1[i+1] <- point.fc
if (i<(nrow(test.X.sj)-2) & 'case_lag2' %in% colnames(xreg.sj)) {
xreg.sj$case_lag2[i+2] <- point.fc
if (i<(nrow(test.X.sj)-3) & 'case_lag3' %in% colnames(xreg.sj)) {
xreg.sj$case_lag3[i+3] <- point.fc
}
}
}
}
plot(test.X.sj$predicted, type='l', main='SJ predicted cases')
best_iq <- get_best_model(tail(train.X.iq,n=(520-52-26)) , test.xreg) #1.0
xreg.iq = test.X.iq %>% select(test.xreg)
for (i in (1:(nrow(test.X.iq)))) {
point.fc <- forecast(best_sj, h=1, xreg=xreg.iq[i,])
point.fc <- as.numeric(point.fc$mean)
if(point.fc < 0) {point.fc <- 0}
test.X.iq$predicted[i] <- point.fc
if (i<(nrow(test.X.iq)-1)) {
xreg.iq$case_lag1[i+1] <- point.fc
if (i<(nrow(test.X.iq)-2) & 'case_lag2' %in% colnames(xreg.iq)) {
xreg.iq$case_lag2[i+2] <- point.fc
if (i<(nrow(test.X.iq)-3) & 'case_lag3' %in% colnames(xreg.iq)) {
xreg.iq$case_lag3[i+3] <- point.fc
}
}
# we didn't forecast the last point, to avoid writing a lag1 that goes beyond the index. Let's do it now
point.fc <- forecast(best_iq, h=1, xreg=xreg.iq[(i+1),])
point.fc <- as.numeric(point.fc$mean)
if(point.fc < 0) {point.fc <- 0}
test.X.iq$predicted[(i+1)] <- point.fc
plot(test.X.iq$predicted, type='l', main='IQ predicted cases')
#====================================================================
#  Gather all the data for submission
#====================================================================
submission = read.csv('submission_format.csv')
inner_join(submission, rbind(test.X.sj,test.X.iq), by=c('city', 'year', 'weekofyear')) %>%
dplyr::select(city, year, weekofyear, total_cases=predicted) ->
prediction.df
prediction.df$total_cases <- round(prediction.df$total_cases)
write.csv(prediction.df, file='AdamsStewartSubmission.csv', row.names = FALSE)
for (i in (1:(nrow(test.X.iq)))) {
point.fc <- forecast(best_sj, h=1, xreg=xreg.iq[i,])
point.fc <- as.numeric(point.fc$mean)
if(point.fc < 0) {point.fc <- 0}
test.X.iq$predicted[i] <- point.fc
if (i<(nrow(test.X.iq)-1)) {
xreg.iq$case_lag1[i+1] <- point.fc
if (i<(nrow(test.X.iq)-2) & 'case_lag2' %in% colnames(xreg.iq)) {
xreg.iq$case_lag2[i+2] <- point.fc
if (i<(nrow(test.X.iq)-3) & 'case_lag3' %in% colnames(xreg.iq)) {
xreg.iq$case_lag3[i+3] <- point.fc
}
}
}
# we didn't forecast the last point, to avoid writing a lag1 that goes beyond the index. Let's do it now
point.fc <- forecast(best_iq, h=1, xreg=xreg.iq[(i+1),])
point.fc <- as.numeric(point.fc$mean)
if(point.fc < 0) {point.fc <- 0}
test.X.iq$predicted[(i+1)] <- point.fc
plot(test.X.iq$predicted, type='l', main='IQ predicted cases')
#====================================================================
#  Gather all the data for submission
#====================================================================
submission = read.csv('submission_format.csv')
inner_join(submission, rbind(test.X.sj,test.X.iq), by=c('city', 'year', 'weekofyear')) %>%
dplyr::select(city, year, weekofyear, total_cases=predicted) ->
prediction.df
prediction.df$total_cases <- round(prediction.df$total_cases)
write.csv(prediction.df, file='AdamsStewartSubmission.csv', row.names = FALSE)
for (i in (1:(nrow(test.X.iq)))) {
point.fc <- forecast(best_sj, h=1, xreg=xreg.iq[i,])
point.fc <- as.numeric(point.fc$mean)
if(point.fc < 0) {point.fc <- 0}
test.X.iq$predicted[i] <- point.fc
if (i<(nrow(test.X.iq)-1)) {
xreg.iq$case_lag1[i+1] <- point.fc
if (i<(nrow(test.X.iq)-2) & 'case_lag2' %in% colnames(xreg.iq)) {
xreg.iq$case_lag2[i+2] <- point.fc
if (i<(nrow(test.X.iq)-3) & 'case_lag3' %in% colnames(xreg.iq)) {
xreg.iq$case_lag3[i+3] <- point.fc
}
}
}
}
for (i in (1:(nrow(test.X.iq)))) {
point.fc <- forecast(best_sj, h=1, xreg=xreg.iq[i,])
point.fc <- as.numeric(point.fc$mean)
if(point.fc < 0) {point.fc <- 0}
test.X.iq$predicted[i] <- point.fc
if (i<(nrow(test.X.iq)-1)) {
xreg.iq$case_lag1[i+1] <- point.fc
if (i<(nrow(test.X.iq)-2) & 'case_lag2' %in% colnames(xreg.iq)) {
xreg.iq$case_lag2[i+2] <- point.fc
if (i<(nrow(test.X.iq)-3) & 'case_lag3' %in% colnames(xreg.iq)) {
xreg.iq$case_lag3[i+3] <- point.fc
}
}
}
}
plot(test.X.iq$predicted, type='l', main='IQ predicted cases')
submission = read.csv('submission_format.csv')
inner_join(submission, rbind(test.X.sj,test.X.iq), by=c('city', 'year', 'weekofyear')) %>%
dplyr::select(city, year, weekofyear, total_cases=predicted) ->
prediction.df
prediction.df$total_cases <- round(prediction.df$total_cases)
write.csv(prediction.df, file='AdamsStewartSubmission.csv', row.names = FALSE)
