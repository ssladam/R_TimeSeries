X.fc <- forecast(X.fit, h=split, xreg=xreg.test)
model.mae <- accuracy(X.fc)[3]
true.mae <- mean(abs(tail(X.fc$fitted, n=split)))
if (true.mae < best_mae) {
best_fit <- X.fit
best_mae <- true.mae
}
cat('Iteration:', i, 'model.mae:', model.mae, ' validation mae:', mae, '\n')
}
X.fit <- nnetar(X.train, xreg=xreg.train, model = best_fit, MaxNWts=nMaxNWts)
X.fc <- forecast(X.fit, h=split, xreg=xreg.test)
plot(X.fc, type='l')
lines(X.test,col='red')
#Note: the next line retrains the model on the full data set, so that future forecasts will start
#   from where the "end" of the training data cuts off. If you want to play with "valication forecasts",
#   Then comment-out the following line so that future forecasts will start from the 20%-end of the
#   training set, so you can review results with the hold out data.
X.fit <- nnetar(ts(input.data$total_cases, frequency=52), xreg=xreg.data, model = best_fit, MaxNWts=nMaxNWts)
return(X.fit)
}
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),1)
get_best_model <- function(input.data, input.xreg, grid.len=3, weights=1000) {
nMaxNWts <- weights
best_mae <- 1000
true.mae = vector()
split <- floor(nrow(input.data)*.2)
X.train <- ts(input.data$total_cases[1:(nrow(input.data)-split)], frequency = 52)
X.test <- ts(input.data$total_cases[(nrow(input.data)-split):nrow(input.data)], frequency = 52, start=(end(X.train) + c(0,1)))
xreg.data = input.data %>% select(input.xreg)
xreg.train <- xreg.data[1:(nrow(input.data)-split),]
xreg.test <- xreg.data[(nrow(input.data)-split):nrow(input.data),]
grid = seq(1:grid.len)
for (i in grid) {
X.fit <- nnetar(X.train, p=3, repeats = 2, scale.inputs = TRUE, xreg=xreg.train, MaxNWts=nMaxNWts)
X.fc <- forecast(X.fit, h=split, xreg=xreg.test)
model.mae <- accuracy(X.fc)[3]
true.mae <- mean(abs(tail(X.fc$fitted, n=split)))
if (true.mae < best_mae) {
best_fit <- X.fit
best_mae <- true.mae
}
cat('Iteration:', i, 'model.mae:', model.mae, ' validation mae:', true.mae, '\n')
}
X.fit <- nnetar(X.train, xreg=xreg.train, model = best_fit, MaxNWts=nMaxNWts)
X.fc <- forecast(X.fit, h=split, xreg=xreg.test)
plot(X.fc, type='l')
lines(X.test,col='red')
#Note: the next line retrains the model on the full data set, so that future forecasts will start
#   from where the "end" of the training data cuts off. If you want to play with "valication forecasts",
#   Then comment-out the following line so that future forecasts will start from the 20%-end of the
#   training set, so you can review results with the hold out data.
X.fit <- nnetar(ts(input.data$total_cases, frequency=52), xreg=xreg.data, model = best_fit, MaxNWts=nMaxNWts)
return(X.fit)
}
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),1)
get_best_model <- function(input.data, input.xreg, grid.len=3, weights=1000) {
nMaxNWts <- weights
best_mae <- 1000
true.mae = vector()
split <- floor(nrow(input.data)*.2)
X.train <- ts(input.data$total_cases[1:(nrow(input.data)-split)], frequency = 52)
X.test <- ts(input.data$total_cases[(nrow(input.data)-split):nrow(input.data)], frequency = 52, start=(end(X.train) + c(0,1)))
xreg.data = input.data %>% select(input.xreg)
xreg.train <- xreg.data[1:(nrow(input.data)-split),]
xreg.test <- xreg.data[(nrow(input.data)-split):nrow(input.data),]
grid = seq(1:grid.len)
for (i in grid) {
X.fit <- nnetar(X.train, p=3, repeats = 2, scale.inputs = TRUE, xreg=xreg.train, MaxNWts=nMaxNWts)
X.fc <- forecast(X.fit, h=split, xreg=xreg.test)
model.mae <- accuracy(X.fc)[3]
true.mae <- mean(abs(tail(X.fc$fitted, n=split)))
if (true.mae < best_mae) {
best_fit <- X.fit
best_mae <- true.mae
}
cat('Iteration:', i, 'model.mae:', model.mae, ' validation mae:', true.mae, '\n')
}
X.fit <- nnetar(X.train, xreg=xreg.train, model = best_fit, MaxNWts=nMaxNWts)
X.fc <- forecast(X.fit, h=split, xreg=xreg.test)
plot(X.fc, type='l')
lines(X.test,col='red')
#Note: the next line retrains the model on the full data set, so that future forecasts will start
#   from where the "end" of the training data cuts off. If you want to play with "valication forecasts",
#   Then comment-out the following line so that future forecasts will start from the 20%-end of the
#   training set, so you can review results with the hold out data.
X.fit <- nnetar(ts(input.data$total_cases, frequency=52), xreg=xreg.data, model = best_fit, MaxNWts=nMaxNWts)
return(X.fit)
}
rf.select <- train.X.sj %>% select(-c(week_start_date, city, year, case_lag1, case_lag2, case_lag3))
rf.select <- ungroup(rf.select)
split <- floor(nrow(rf.select)*.2)
y.train <- ts(rf.select$total_cases[1:(nrow(rf.select)-split)], frequency = 52)
y.val <- ts(rf.select$total_cases[(nrow(rf.select)-split):nrow(rf.select)], frequency = 52, start=(end(y.train) + c(0,1)))
X.all <- rf.select %>% select(-c(total_cases))
X.train <- X.all[1:(nrow(X.all)-split),]
X.val <- X.all[(nrow(X.all)-split):nrow(X.all),]
library(party)
cf1 <- cforest(y.train ~ ., data=X.train, control=cforest_unbiased(mtry=2, ntree=50))
v <- varimpAUC(cf1)
v <- sort(abs(v), decreasing = TRUE)
barplot(v)
cat(paste(names(v), round(v,2), sep=':', collapse='\n'))
cust.xreg10 <- names(v)[1:10]
cust.xreg15 <- names(v)[1:15]
cust.xreg20 <- names(v)[1:20]
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),1)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),1)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),1)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),1)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),1)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),1)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),1)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),1)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),1)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),1)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),1)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),1)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust15_model <- get_best_model(train.X.sj, c(cust.xreg15),1)
cust15_model <- get_best_model(train.X.sj, c(cust.xreg15),1)
cust15_model <- get_best_model(train.X.sj, c(cust.xreg15),1)
cust15_model <- get_best_model(train.X.sj, c(cust.xreg15),1)
cust15_model <- get_best_model(train.X.sj, c(cust.xreg15),1)
cust15_model <- get_best_model(train.X.sj, c(cust.xreg15),1)
cust15_model <- get_best_model(train.X.sj, c(cust.xreg15),1)
cust15_model <- get_best_model(train.X.sj, c(cust.xreg15),1)
cust15_model <- get_best_model(train.X.sj, c(cust.xreg15),1)
cust15_model <- get_best_model(train.X.sj, c(cust.xreg15),1)
cust15_model <- get_best_model(train.X.sj, c(cust.xreg15),1)
validate_perf(cust15_model, train.X.sj %>% select(c(cust.xreg15)), train.X.sj)
validate_perf_nocaselag(cust15_model, train.X.sj %>% select(c(cust.xreg15)), train.X.sj)
sj.fc <- test_forecast(cust15_model, cust.xreg15, test.X.sj)
sj.fc <- test_forecast_nocaselag(cust15_model, cust.xreg15, test.X.sj)
rf.select <- train.X.iq %>% select(-c(week_start_date, city, year, case_lag1, case_lag2, case_lag3))
rf.select <- ungroup(rf.select)
split <- floor(nrow(rf.select)*.2)
y.train <- ts(rf.select$total_cases[1:(nrow(rf.select)-split)], frequency = 52)
y.val <- ts(rf.select$total_cases[(nrow(rf.select)-split):nrow(rf.select)], frequency = 52, start=(end(y.train) + c(0,1)))
X.all <- rf.select %>% select(-c(total_cases))
X.train <- X.all[1:(nrow(X.all)-split),]
X.val <- X.all[(nrow(X.all)-split):nrow(X.all),]
library(party)
cf1 <- cforest(y.train ~ ., data=X.train, control=cforest_unbiased(mtry=2, ntree=50))
#varimp(cf1, conditional = TRUE)
v <- varimpAUC(cf1)
v <- sort(abs(v), decreasing = TRUE)
barplot(v)
cat(paste(names(v), round(v,2), sep=':', collapse='\n'))
cust.xreg10 <- names(v)[1:10]
cust.xreg15 <- names(v)[1:15]
cust.xreg20 <- names(v)[1:20]
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
validate_perf(cust10_model_iq, train.X.iq %>% select(c(cust.xreg10)), train.X.iq)
iq.val.fc <- validate_perf_nocaselag(cust10_model_iq, train.X.iq %>% select(c(cust.xreg10)), train.X.iq)
iq.fc <- test_forecast(cust10_model_iq, cust.xreg10, test.X.iq)
iq.fc <- test_forecast_nocaselag(cust10_model_iq, cust.xreg10, test.X.iq)
iq.fc$predicted[iq.fc$predicted<0] <- 2
submission = read.csv('submission_format.csv')
inner_join(submission, rbind(sj.fc,iq.fc), by=c('city', 'year', 'weekofyear')) %>%
select(city, year, weekofyear, total_cases=predicted) ->
prediction.df
write.csv(prediction.df, file='AdamsStewartSubmission.csv', row.names = FALSE)
rf.select <- train.X.sj %>% select(-c(week_start_date, city, year, case_lag1, case_lag2, case_lag3))
rf.select <- ungroup(rf.select)
split <- floor(nrow(rf.select)*.2)
y.train <- ts(rf.select$total_cases[1:(nrow(rf.select)-split)], frequency = 52)
y.val <- ts(rf.select$total_cases[(nrow(rf.select)-split):nrow(rf.select)], frequency = 52, start=(end(y.train) + c(0,1)))
X.all <- rf.select %>% select(-c(total_cases))
X.train <- X.all[1:(nrow(X.all)-split),]
X.val <- X.all[(nrow(X.all)-split):nrow(X.all),]
library(party)
cf1 <- cforest(y.train ~ ., data=X.train, control=cforest_unbiased(mtry=2, ntree=50))
#varimp(cf1, conditional = TRUE)
v <- varimpAUC(cf1)
v <- sort(abs(v), decreasing = TRUE)
barplot(v)
cat(paste(names(v), round(v,2), sep=':', collapse='\n'))
cust.xreg10 <- names(v)[1:10]
cust.xreg15 <- names(v)[1:15]
cust.xreg20 <- names(v)[1:20]
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust.xreg10 <- names(v)[1:8]
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust.xreg10 <- names(v)[1:9]
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust.xreg10 <- names(v)[1:11]
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust.xreg10 <- names(v)[1:12]
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
rf.select <- train.X.sj %>% select(-c(week_start_date, city, year, case_lag1, case_lag2, case_lag3,
seas_min_temp, seas_max_temp, seas_avg_temp,
seas_min_temp1, seas_min_temp2, seas_min_temp3, seas_min_temp4,
seas_max_temp1,seas_max_temp2,seas_max_temp3,seas_max_temp4,
seas_avg_temp1,seas_avg_temp2,seas_avg_temp3,seas_avg_temp4))
rf.select <- ungroup(rf.select)
split <- floor(nrow(rf.select)*.2)
y.train <- ts(rf.select$total_cases[1:(nrow(rf.select)-split)], frequency = 52)
y.val <- ts(rf.select$total_cases[(nrow(rf.select)-split):nrow(rf.select)], frequency = 52, start=(end(y.train) + c(0,1)))
X.all <- rf.select %>% select(-c(total_cases))
X.train <- X.all[1:(nrow(X.all)-split),]
X.val <- X.all[(nrow(X.all)-split):nrow(X.all),]
library(party)
cf1 <- cforest(y.train ~ ., data=X.train, control=cforest_unbiased(mtry=2, ntree=50))
#varimp(cf1, conditional = TRUE)
v <- varimpAUC(cf1)
v <- sort(abs(v), decreasing = TRUE)
barplot(v)
cat(paste(names(v), round(v,2), sep=':', collapse='\n'))
cust.xreg10 <- names(v)[1:12]
cust.xreg15 <- names(v)[1:15]
cust.xreg20 <- names(v)[1:20]
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
rf.select <- train.X.iq %>% select(-c(week_start_date, city, year, case_lag1, case_lag2, case_lag3,
seas_min_temp, seas_max_temp, seas_avg_temp,
seas_min_temp1, seas_min_temp2, seas_min_temp3, seas_min_temp4,
seas_max_temp1,seas_max_temp2,seas_max_temp3,seas_max_temp4,
seas_avg_temp1,seas_avg_temp2,seas_avg_temp3,seas_avg_temp4))
rf.select <- ungroup(rf.select)
split <- floor(nrow(rf.select)*.2)
y.train <- ts(rf.select$total_cases[1:(nrow(rf.select)-split)], frequency = 52)
y.val <- ts(rf.select$total_cases[(nrow(rf.select)-split):nrow(rf.select)], frequency = 52, start=(end(y.train) + c(0,1)))
X.all <- rf.select %>% select(-c(total_cases))
X.train <- X.all[1:(nrow(X.all)-split),]
X.val <- X.all[(nrow(X.all)-split):nrow(X.all),]
library(party)
cf1 <- cforest(y.train ~ ., data=X.train, control=cforest_unbiased(mtry=2, ntree=50))
#varimp(cf1, conditional = TRUE)
v <- varimpAUC(cf1)
v <- sort(abs(v), decreasing = TRUE)
barplot(v)
cat(paste(names(v), round(v,2), sep=':', collapse='\n'))
cust.xreg10 <- names(v)[1:10]
cust.xreg15 <- names(v)[1:15]
cust.xreg20 <- names(v)[1:20]
rf.select <- train.X.sj %>% select(-c(week_start_date, city, year, case_lag1, case_lag2, case_lag3,
seas_min_temp, seas_max_temp, seas_avg_temp,
seas_min_temp1, seas_min_temp2, seas_min_temp3, seas_min_temp4,
seas_max_temp1,seas_max_temp2,seas_max_temp3,seas_max_temp4,
seas_avg_temp1,seas_avg_temp2,seas_avg_temp3,seas_avg_temp4))
rf.select <- ungroup(rf.select)
split <- floor(nrow(rf.select)*.2)
y.train <- ts(rf.select$total_cases[1:(nrow(rf.select)-split)], frequency = 52)
y.val <- ts(rf.select$total_cases[(nrow(rf.select)-split):nrow(rf.select)], frequency = 52, start=(end(y.train) + c(0,1)))
X.all <- rf.select %>% select(-c(total_cases))
X.train <- X.all[1:(nrow(X.all)-split),]
X.val <- X.all[(nrow(X.all)-split):nrow(X.all),]
library(party)
cf1 <- cforest(y.train ~ ., data=X.train, control=cforest_unbiased(mtry=2, ntree=50))
#varimp(cf1, conditional = TRUE)
v <- varimpAUC(cf1)
v <- sort(abs(v), decreasing = TRUE)
barplot(v)
cat(paste(names(v), round(v,2), sep=':', collapse='\n'))
cust.xreg10 <- names(v)[1:12]
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),1)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),1)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),1)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),1)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),1)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),1)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),1)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),1)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),10)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust.xreg10 <- names(v)[1:10]
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
rf.select <- train.X.sj %>% select(-c(week_start_date, city, year, case_lag1, case_lag2, case_lag3,
seas_min_temp, seas_max_temp, seas_avg_temp,
seas_min_temp1, seas_min_temp2, seas_min_temp3, seas_min_temp4,
seas_max_temp1,seas_max_temp2,seas_max_temp3,seas_max_temp4,
seas_avg_temp1,seas_avg_temp2,seas_avg_temp3,seas_avg_temp4))
rf.select <- ungroup(rf.select)
split <- floor(nrow(rf.select)*.2)
y.train <- ts(rf.select$total_cases[1:(nrow(rf.select)-split)], frequency = 52)
y.val <- ts(rf.select$total_cases[(nrow(rf.select)-split):nrow(rf.select)], frequency = 52, start=(end(y.train) + c(0,1)))
X.all <- rf.select %>% select(-c(total_cases))
X.train <- X.all[1:(nrow(X.all)-split),]
X.val <- X.all[(nrow(X.all)-split):nrow(X.all),]
library(party)
cf1 <- cforest(y.train ~ ., data=X.train, control=cforest_unbiased(mtry=2, ntree=50))
#varimp(cf1, conditional = TRUE)
v <- varimpAUC(cf1)
v <- sort(abs(v), decreasing = TRUE)
barplot(v)
cat(paste(names(v), round(v,2), sep=':', collapse='\n'))
cust.xreg10 <- names(v)[1:10]
cust.xreg15 <- names(v)[1:15]
cust.xreg20 <- names(v)[1:20]
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
cust10_model <- get_best_model(train.X.sj, c(cust.xreg10),3)
validate_perf(cust10_model, train.X.sj %>% select(c(cust.xreg10)), train.X.sj)
sj.val.fc <- validate_perf_nocaselag(cust10_model, train.X.sj %>% select(c(cust.xreg10)), train.X.sj)
sj.fc <- test_forecast(cust10_model, cust.xreg10, test.X.sj)
sj.fc <- test_forecast_nocaselag(cust10_model, cust.xreg10, test.X.sj)
sj.fc$predicted[sj.fc$predicted<0] <- 2
rf.select <- train.X.iq %>% select(-c(week_start_date, city, year, case_lag1, case_lag2, case_lag3,
seas_min_temp, seas_max_temp, seas_avg_temp,
seas_min_temp1, seas_min_temp2, seas_min_temp3, seas_min_temp4,
seas_max_temp1,seas_max_temp2,seas_max_temp3,seas_max_temp4,
seas_avg_temp1,seas_avg_temp2,seas_avg_temp3,seas_avg_temp4))
rf.select <- ungroup(rf.select)
split <- floor(nrow(rf.select)*.2)
y.train <- ts(rf.select$total_cases[1:(nrow(rf.select)-split)], frequency = 52)
y.val <- ts(rf.select$total_cases[(nrow(rf.select)-split):nrow(rf.select)], frequency = 52, start=(end(y.train) + c(0,1)))
X.all <- rf.select %>% select(-c(total_cases))
X.train <- X.all[1:(nrow(X.all)-split),]
X.val <- X.all[(nrow(X.all)-split):nrow(X.all),]
library(party)
cf1 <- cforest(y.train ~ ., data=X.train, control=cforest_unbiased(mtry=2, ntree=50))
#varimp(cf1, conditional = TRUE)
v <- varimpAUC(cf1)
v <- sort(abs(v), decreasing = TRUE)
barplot(v)
cat(paste(names(v), round(v,2), sep=':', collapse='\n'))
cust.xreg10 <- names(v)[1:10]
cust.xreg15 <- names(v)[1:15]
cust.xreg20 <- names(v)[1:20]
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
cust10_model_iq <- get_best_model(train.X.iq, c(cust.xreg10),1)
validate_perf(cust10_model_iq, train.X.iq %>% select(c(cust.xreg10)), train.X.iq)
iq.val.fc <- validate_perf_nocaselag(cust10_model_iq, train.X.iq %>% select(c(cust.xreg10)), train.X.iq)
iq.fc <- test_forecast(cust10_model_iq, cust.xreg10, test.X.iq)
iq.fc <- test_forecast_nocaselag(cust10_model_iq, cust.xreg10, test.X.iq)
iq.fc$predicted[iq.fc$predicted<0] <- 2
submission = read.csv('submission_format.csv')
inner_join(submission, rbind(sj.fc,iq.fc), by=c('city', 'year', 'weekofyear')) %>%
select(city, year, weekofyear, total_cases=predicted) ->
prediction.df
write.csv(prediction.df, file='AdamsStewartSubmission.csv', row.names = FALSE)
